# To Do


## Projects


### Allowing Customers to Subscribe to Release Notes

 1. **Releases:** set levels for tags (Customer, Internal, All) 
 2. Rethink notifications --- has something to do with releases
   - **Project:** fix setting notifications
   - **Project:** faster way for checking notifications!
   - **Release Emails:** send one-off (so can be sent to customers)
 3. Create embeddable front-end


### Show Real-Time Analytics

 1. Move to houston.prd
 2. Use Foreman to manage other processes, http://blog.daviddollar.org/2011/05/06/introducing-foreman.html, http://ddollar.github.com/foreman/, http://michaelvanrooijen.com/articles/2011/06/08-managing-and-monitoring-your-ruby-application-with-foreman-and-upstart/
 3. Use Resque to do expensive fetches in background jobs (--> unfuddle.json)
 4. Solve replacing Kanban (refresh tickets) (with resque?)
 5. Release Real-Time graphs
   - Solve for multiple apps (multiple gauges? multiple fields?)
 - **Project Dashboard:**
   - Real-time graph of exception notices
   - Figure out how to show queue history; show more weeks
   - Show deploys _on_ real-time graphs


### Related to Errbit

 - **Errbit:** modify API to include project for notices
   - **Exceptions:** show notice-count pie
 - **Errbit:** add web hooks
   - Trigger sound effects


## Loose


### Soon

 - **Global:** redesign section headings with links
 - Retire a project
 - allow changing Git URL (have tmp folder deleted or whatever)
 - **Deploy Emails:**
   - have up-to-date commits
   - are styled like view (=> can get rid of releases/changelog partial, et al then)
 - **Weekly Report:**
   - ?> Pair projects with colors somewhere (then don't for "Focus this week")
   - **Exceptions:** problems history is off by 1 week?
   - New Section: **Deploys** or **Releases**
   - New Section: **Test Coverage** (add Jenkins as a CI adapter)
   - Fix a few rendering glitches
   - **Performance:** Replace "apdex" graphs with histogram of response times
     - Refactor NewRelic part
       - Cache API calls


### After that

 - **Weekly Report:**
   - Cache Google Chart images in emails and/or implement server-side SVG library
 - **Release:**
   - allow adding/removing _tickets_ from release notes
   - show ticket/change counts in real time
 - **Dashboard:**
   - Design dashboard
 - Refactoring:
   - Extract WeeklyReport model from WeeklyReports#show
   - Duplicate code in `users_controller#index` and `users_controller#show`
   - Duplicate code in Projects#show and WeeklyReport#show
   - New Relic API calls
 - Write tests :l
 ! **Testing Notes:** edit a failing testing note at home, SMTP fail, timeout takes 30 seconds!
 ! **Global:** disable buttons when working! (e.g. what saving a very slow testing note)


### Eventually

 - **Kanban:** optimize rendering tickets on the server
 - **Release Email:** add _retest_ group for testing update
 - **Project:** allow manually updating commits


### Refactoring and Configuration

 - Turn on or off features via config.rb
 - Make mobile site
 - Should "key_dependencies" be defined per-project rather than in config.rb?
 - Refactor hard-coded knowledge about Unfuddle/EP into configuration
   - "in_testing" queue for "Testing Report"
   - "deployment" for "Production" badge on tickets (Testing Report?)
   - "goldmine" for Release notes
   - "dev" and "master" environments
   - what counts as invalid or duplicate in `users_controller.rb`
   - how feature prefixes are boldened for Unfuddle tickets


### Ideas

 - **Daily Report:**
   - Send daily report to project maintainers with news
     - Recent new tickets
     - Recent new exceptions
     - Maintenance lights
 - **Release:** cache `deploy.created_at` as `deployed_at`
 - **Releases:** Support RSS
 - ?? Need to include testing metrics: code coverage? test runs?
 - Report on health of tickets
 - **Weekly Report:**
   - **Exceptions:** split bar graph?
   - time-to-close [bug] ticket
   - time-to-close exception
   - group into supersections
     - "Productivity", "Maintenance", "Development" [?]
     - "Effort", "Task" | "Us", "Them" | "Red", "Blue"
   - add a Customer Satisfaction metric
   - add "Superlatives"
     - most total commits per week/day
     - most commits to a project per week/day
     - most projects committed to per week
     - first commit to a project per developer
 - **Project Dashboard:**
   - ?? New tickets
   - ?? New problems
 - **User:** Compare personal severity with average
 - **Testing Report:**
   - Give a way of prioritizing / flagging tickets
   - Expland/collapse all
   - Send notification for 'none' verdict
 - Log in with your Unfuddle credentials
   - use API GET `users/current` to validate
   - implement in a modular way: easy to replace if Unfuddle is replaced
   - activity in Unfuddle is performed as you
   - icon indicating linkage in Kanban
   - handle Unfuddle access denied errors like CanCan ones
   - store password securely!
