# To Do

# Fixes & Refinements
=====================================================================

 1. **Kanban:** fetch ticket queue status in the background in case Kanban isn't default screen
 2. **Test Results:** Add duration
 2. **Test Results:** Add coverage info
 3. **Releases/Deploy Emails:** have up-to-date commits
 3. **Test Results**, **Deploy**: add branch name to test run emails; to deploy complete emails
 
 4. **Global:** Handle Timeout::Error
 4. **Weekly Report/Exceptions:** problems history is off by 1 week?
 4. **Weekly Report:** cache Google Chart images in emails and/or implement server-side SVG library
 5. **Global:** disable buttons when working! (e.g. what saving a very slow testing note)
 5. **CI Results:** fails are reported as errors
 5. **Project:** allow changing Version Control Location (have tmp folder deleted or whatever)
 5. **Testing Notes:** edit a failing testing note at home, SMTP fail, timeout takes 30 seconds!




# Horizon 1
=====================================================================

Goals:
 - Measure exception turn time
 - Prioritize project backlogs

Questions:
 - Is it possible prioritize w/ drag-and-drop Story cards? (How to deal with scale? Prerequisites?)

Tasks:
 - **Weekly Report/Exceptions:** show average time to close problem
 - **Weekly Report/Exceptions:** break down notices by project
 - **Houston-Scheduler:** show severities
 - **Houston-Scheduler:** expand tickets like Testing Report does
 - **Houston-Scheduler:** allow editing prerequisites
 - **Houston-Scheduler:** Queuing Discipline takes prerequisites into account




# Horizon 2
=====================================================================

Goals:
 - Close loop on releases
 - Consolidate information for developers

Questions:
 - What is the right role for managers, bosses, leadership?
 - How to to _interpret_ out-of-date-ness? Assign a grade? What about urgency of patches? OK button?

Projects:
 - Reinvent Notifications:
   - Send one-off emails that can take advantage of the abilities of each recipient
   - Put a link in emails to user's notifications options (automatically logging them in)
   - Allow people to follow projects
   - Users have a notification center where they choose what kind of notifications they see for a project
   - [idea] Remove add-but-dont-invite
   - [idea] Project screen: participants (avatars) min/max width | Maintainers = special kind of participant
   - [idea] Have modules define permissions needed
   - **Project:** fix setting notifications
 - Daily Report:
   - Recent new tickets
   - Recent new exceptions
   - Maintenance lights
 - Antecedents:
   - Houston: Implement Antecedents with Goldmine hacked in
   - Auto-resolve exception antecedents
   - Send support notifications on problem antecedents




# Horizon 3: Ideas
=====================================================================

Goals:
 - Make Houston flexible enough to use in other contexts
 
### Refactoring

 - **Engines:**
   - Engines need to supply configuration objects, plug in to config.rb
   - Create a Rails Engine generator for Houston plugins based on Houston::Scheduler
 - **Modularity:**
   - Extract **Errbit**, **NewRelic**, and **GitHub** knowledge
   - Refactor hard-coded knowledge about Unfuddle/EP into configuration
     - Replace `config/initializers/hard_coded_knowledge.rb`
     - Replace `User#default_notifications_environments` with configuration
     - Replace `tickets.goldmine`, `Ticket#goldmine_numbers`, `Release#goldmine_numbers` with "antecedents"
     - Add `tickets.status` or `tickets.closed`
     - Unfuddle-specific knowledge of severities (Weekly Report, Project Dashboard)
     - Unfuddle-specific knowledge re: invalid or duplicate in `users_controller.rb`
     - Unfuddle::NeqHelper
   - Turn on or off features via config.rb
   - Extract **houston-ci**
   - Extract **houston-releases**
   - Extract **houston-testing-report**
   - Extract **houston-kanban** (rename)
 - **Clean Code:**
   - Extract WeeklyReport model from WeeklyReports#show
   - Duplicate code in `users_controller#index` and `users_controller#show`
   - Duplicate code in Projects#show and WeeklyReport#show
   - New Relic API calls
   - Use [actionmailer_inline_css](https://github.com/ndbroadbent/actionmailer_inline_css)?
 - Write tests
   - Socketable configuration

### Ideas

 - **Releases:** incorporate GitHub commit-range link more places
 - **Releases:** search [e.g. for commit]
 - **Deploys:** add a list of deploys; allow creating releases for old deploys
 - **Releases:** create embeddable front-end for releases
 - **Release:** auto-resolve errors on releases
 - **Weekly Report:**
   - Pair projects with colors somewhere (then don't for "Focus this week")
   - New Section: **Deploys** or **Releases**
   - New Section: **Test Coverage**
   - New Section: **Performance** (shows _histogram_ of response times)
   - New Section: **Superlatives**
 - **Releases:** show ticket/change counts in real time when editing a release
 - **Kanban:** optimize rendering tickets on the server
 - **Projects:** show retired projects and allow "unretiring" them
 - **Global:** make mobile site
 - **Testing Report:** allow creating tickets right there!
 - **Testing Report:** allow editing tickets!
 - **Release:** cache `deploy.created_at` as `deployed_at`
 - **Releases:** Support RSS
 - Report on health of tickets
 - **Weekly Report:**
   - **Exceptions:** split bar graph?
   - time-to-close [bug] ticket
   - group into supersections
     - "Productivity", "Maintenance", "Development" [?]
     - "Effort", "Task" | "Us", "Them" | "Red", "Blue"
   - add a Customer Satisfaction metric
   - add "Superlatives"
     - most total commits per week/day
     - most commits to a project per week/day
     - most projects committed to per week
     - first commit to a project per developer
 - **Project Dashboard:**
   - ?? New tickets
   - ?? New problems
 - **Global:** employ Twitter Bootstrap in emails
 - **Testing Report:** add priority options (to left of ticket): high/low, exclusive checkboxes
 - **Testing Report:** add additional vevrdicts (pass-with-suggestions? unable-to-test?)
 - **Releases:** add "What's in the pipe?" view that shows what _would_ be released to production if it were released now
 - **Releases:** allow adding/removing _tickets_ from release notes
 - **Houston-CI**: incorporate Deploy into Houston
 - **Houston-Fnord**: (show real-time analytics)
   - Solve for multiple apps (multiple gauges? multiple fields?)
   - **Project Dashboard:**
     - Real-time graph of exception notices
     - Figure out how to show queue history; show more weeks
     - Show deploys _on_ real-time graphs
