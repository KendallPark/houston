# To Do

### Troubleshooting

 - Does the deploy endpoint require login --- so deploys don't register if user is logged out? Should use token authentication.
 - **Project:** allow changing Version Control Location (have tmp folder deleted or whatever)
 - **Weekly Report/Exceptions:** problems history is off by 1 week?

### Fixes

 - Handle InvalidQueryError (when Unfuddle project doesn't have "Health", etc)
 - **Testing Notes:** edit a failing testing note at home, SMTP fail, timeout takes 30 seconds!
 - **Releases/Deploy Emails:** have up-to-date commits
 - **Testing Report:** ticket ages make no sense
 - **CI Results:** fails are reported as errors!

### Small Projects

 - **Testing Report:** add priority options (to left of ticket): high/low, exclusive checkboxes
 - **Testing Report:** show status and send notification for 'none' verdict
 - **Kanban:** fetch ticket queue status in the background in case Kanban isn't default screen
 - **Releases:** set levels for tags (Customer, Internal, All)
 - **Releases:** allow adding/removing _tickets_ from release notes
 - **Weekly Report:** cache Google Chart images in emails and/or implement server-side SVG library
 - **Weekly Report/Exceptions:** break down notices by project
 - **Weekly Report/Exceptions:** show average time to close problem
 - **Global:** disable buttons when working! (e.g. what saving a very slow testing note)

### Bigger Projects

 - **Houston-Scheduler**
 - **Houston-CI**:
   - **CI Results:** implement graphs
   - **CI Results:** incorporate coverage information
   - Deploy if dev or master
   - Disabled for projects with local repos
   - Secure (c.f. http://fourkitchens.com/blog/2011/09/20/trigger-jenkins-builds-pushing-github, )
 - **Notifications**:
   - Notes
     - GitHub style
       - Users can "watch" a project
       - Users have a notification center where they choose what kind of notifications they see for a project
       - Admin can see these settings and set good defaults, change them
       - NB: would have to give CTS credentials
         - Requires more robust permissions system?
           - In config.rb, activate modules per role?
     - **Project:** fix setting notifications
     - **Release Emails:** send one-off (so can be sent to customers)
       - Include unsubscribe link
 - **Houston-Fnord**: (show real-time analytics)
   - Solve for multiple apps (multiple gauges? multiple fields?)
   - **Project Dashboard:**
     - Real-time graph of exception notices
     - Figure out how to show queue history; show more weeks
     - Show deploys _on_ real-time graphs

### Refactoring

 - **Engines:**
   - Engines need to supply configuration objects, plug in to config.rb
   - Create a Rails Engine generator for Houston plugins based on Houston::Scheduler
 - **Modularity:**
   - Use Postgres Hstore for extended attributes (c.f. http://railscasts.com/episodes/345-hstore)
   - Extract **Errbit**, **NewRelic**, and **GitHub** knowledge
   - Refactor hard-coded knowledge about Unfuddle/EP into configuration
     - Environments
       - `User#default_notifications_environments`
     - "tickets.deployment"; TicketTracking Adapter; name of "Fixed in" field
       - `Project#ticket_attributes_from_unfuddle_ticket`
       - `Project#get_custom_ticket_attribute`
       - Name of "Fixed in" field in Unfuddle (`releases/_form.html.erb:62`)
       - `Ticket#set_unfuddle_kanban_field_to`
     - "tickets.goldmine"
       - `Project#ticket_attributes_from_unfuddle_ticket`
       - `Release#goldmine_numbers`
     - Unfuddle-specific knowledge of severities (Weekly Report, Project Dashboard)
     - Unfuddle-specific knowledge re: invalid or duplicate in `users_controller.rb`
     - Unfuddle::NeqHelper
   - Turn on or off features via config.rb
   - Extract **houston-ci**
   - Extract **houston-releases**
   - Extract **houston-testing-report**
   - Extract **houston-kanban** (rename)
 - **Clean Code:**
   - Extract WeeklyReport model from WeeklyReports#show
   - Duplicate code in `users_controller#index` and `users_controller#show`
   - Duplicate code in Projects#show and WeeklyReport#show
   - New Relic API calls
   - Use [actionmailer_inline_css](https://github.com/ndbroadbent/actionmailer_inline_css)?
 - Write tests
   - Socketable configuration

### Ideas

 - **Releases:** incorporate GitHub commit-range link more places
 - **Releases:** search [e.g. for commit]
 - **Deploys:** add a list of deploys; allow creating releases for old deploys
 - **Releases:** create embeddable front-end for releases
 - **Release:** auto-resolve errors on releases
 - **Weekly Report:**
   - Pair projects with colors somewhere (then don't for "Focus this week")
   - New Section: **Deploys** or **Releases**
   - New Section: **Test Coverage**
   - New Section: **Performance** (shows _histogram_ of response times)
   - New Section: **Superlatives**
 - **Releases:** show ticket/change counts in real time when editing a release
 - **Kanban:** optimize rendering tickets on the server
 - **Projects:** show retired projects and allow "unretiring" them
 - **Global:** make mobile site
 - **Testing Report:** allow creating tickets right there!
 - **Testing Report:** allow editing tickets!
 - **Daily Report:**
   - Send daily report to project maintainers with news
     - Recent new tickets
     - Recent new exceptions
     - Maintenance lights
 - **Release:** cache `deploy.created_at` as `deployed_at`
 - **Releases:** Support RSS
 - Report on health of tickets
 - **Weekly Report:**
   - **Exceptions:** split bar graph?
   - time-to-close [bug] ticket
   - group into supersections
     - "Productivity", "Maintenance", "Development" [?]
     - "Effort", "Task" | "Us", "Them" | "Red", "Blue"
   - add a Customer Satisfaction metric
   - add "Superlatives"
     - most total commits per week/day
     - most commits to a project per week/day
     - most projects committed to per week
     - first commit to a project per developer
 - **Project Dashboard:**
   - ?? New tickets
   - ?? New problems
 - **Global:** employ Twitter Bootstrap in emails
