<%
  
  @date_range = @weekly_report.date_range
  weekday_by_wday = %w{Weekend Monday Tuesday Wednesday Thursday Friday Weekend}
  weekdays = %w{Monday Tuesday Wednesday Thursday Friday Weekend}
  total_bugs = 0
  
  weeks_of_commit_history = 26
  date_range_multiweek = ((weeks_of_commit_history - 1).weeks.before(@date_range.begin))..@date_range.end
  
  weeks_of_errbit_history = 16
  date_range_multiweek2 = ((weeks_of_errbit_history - 1).weeks.before(@date_range.begin))..@date_range.end
  errbit_history_weeks = date_range_multiweek2.step(7)
  
  time_range = @date_range.begin.beginning_of_day.to_time.to_i...@date_range.end.end_of_day.to_time.to_i
  time_range_multiweek = date_range_multiweek.begin.beginning_of_day.to_time.to_i...date_range_multiweek.end.end_of_day.to_time.to_i
  
  
  
  bug_counts_by_project = {}
  bugs_by_week_by_project = Hash[@projects.zip]
  bugs_by_grade = {"A" => 0, "B" => 0, "C" => 0, "D" => 0, "F" => 0, " " => 0}
  bugs_by_possible_grade = {"A" => 0, "B" => 0, "C" => 0, "D" => 0, "F" => 0}
  bugs_new_this_week = 0
  bugs_fixed_this_week = 0
  bugs_change_this_week = 0
  grade_colors = ["42a800", "9fbd2a", "ebc93b", "d65b17", "b50000", "dddddd"]
  
  benchmark("Preparing data for bugs graphs") do
    
    bugs = Houston::Adapters::ErrorTracker::ErrbitAdapter.problems_during(date_range_multiweek2)
    
    bugs.each do |bug|
      project = @projects.detect { |project| project.extended_attributes["errbit_app_id"] == bug.app_id }
      next unless project
      
      bugs_by_week = (bugs_by_week_by_project[project] ||= Hash[errbit_history_weeks.zip([0]*weeks_of_errbit_history)])
      bug_counts = (bug_counts_by_project[project] ||= {"fixed" => 0, "new" => 0, "open" => 0})
      
      errbit_history_weeks.each do |week|
        
        # open during week?
        if (bug.first_notice_at < week) && (bug.resolved_at.nil? || bug.resolved_at >= 7.days.after(week))
          bugs_by_week[week] += 1
        end
        
      end
      
      if (bug.first_notice_at < @date_range.end) && (bug.resolved_at.nil? || bug.resolved_at >= @date_range.begin)
        
        status = bug.resolved? ? "fixed" : (bug.first_notice_at >= @date_range.begin) ? "new" : "open"
        bug_counts[status] += 1
        
      end
      bugs_new_this_week += 1 if bug.first_notice_at < @date_range.end && bug.first_notice_at > @date_range.begin
      bugs_fixed_this_week += 1 if bug.resolved_at && bug.resolved_at < @date_range.end && bug.resolved_at > @date_range.begin
      
      
      time_unresolved = (bug.resolved_at || Time.now) - bug.first_notice_at
      grade = if    time_unresolved <  3.days then "A"
              elsif time_unresolved <  8.days then "B"
              elsif time_unresolved < 15.days then "C"
              elsif time_unresolved < 30.days then "D"
              else                                 "F"
              end
      
      if bug.resolved_at.nil?
        bugs_by_grade[" "] += 1
      else
        bugs_by_grade[grade] += 1
      end
      bugs_by_possible_grade[grade] += 1
      
    end
    
    bugs_change_this_week = bugs_new_this_week - bugs_fixed_this_week
  end
  
  points          = (bugs_by_grade["A"] * 4.0 + 
                     bugs_by_grade["B"] * 3.0 + 
                     bugs_by_grade["C"] * 2.0 + 
                     bugs_by_grade["D"] * 1.0)
  possible_points = (bugs_by_possible_grade["A"] * 4.0 + 
                     bugs_by_possible_grade["B"] * 3.0 + 
                     bugs_by_possible_grade["C"] * 2.0 + 
                     bugs_by_possible_grade["D"] * 1.0)
  bugs_gpa_actual = (points / bugs_by_grade.values.sum).round(2)
  bugs_gpa_possible = (possible_points / bugs_by_possible_grade.values.sum).round(2)
  
  
  notices_by_week_by_project = Hash[@projects.zip]
  
  benchmark("Preparing data for notices graphs") do
    
    notices = Houston::Adapters::ErrorTracker::ErrbitAdapter.notices_during(date_range_multiweek2)
    
    notices.each do |notice|
      project = @projects.detect { |project| project.extended_attributes["errbit_app_id"] == notice.app_id }
      next unless project
      
      notices_by_week = (notices_by_week_by_project[project] ||= Hash[errbit_history_weeks.zip([0]*weeks_of_errbit_history)])
      
      week = notice.created_at.beginning_of_week.to_date
      next unless notices_by_week.key?(week) # we're getting notices for the monday after the sunday that should end the range
      notices_by_week[week] += 1
    end
    
  end
  
  
  
  colors = Houston.config.project_colors
  
%>

<h3 class="heading">
  <%= image_tag image_url("heading-bug-48.png"), size: "48" %>
  Exceptions
</h3>

<div class="weekly-report-body">
  <table class="layout exceptions-report">
    <tr>
      <td class="exceptions-resolve-rate">
        <%= bar_graph({
          data: bugs_by_grade.values.map_with_index { |value, i| ([0] * 6).tap { |array| array[i] = value } },
          labels: bugs_by_grade.keys,
          colors: grade_colors,
          count: 6,
          height: 120,
          bar_width: 20,
          spacing: 4,
          axes: false,
          title: "Resolve time"
        }) %>
      </td>
      <td class="exceptions-gpa">
        <div class="score score-large">
          <div class="score-count"><%= bugs_gpa_actual.to_s.split(".").join("<span class=\"period\">.</span>").html_safe %></div>
          <h4>GPA</h4>
          <div class="score-label">(<%= bugs_gpa_possible %> possible)</div>
        </div>
      </td>
      <td class="exceptions-problem-count">
        <%
          data, colors_included = [], []
          @projects.each do |project|
            values = bugs_by_week_by_project[project]
            next unless values
            
            data << values.values
            colors_included << colors[project.color]
          end
        %>
        <%= area_graph({
          data: data,
          colors: colors_included,
          width: 392,
          height: 152,
          title: "#{weeks_of_errbit_history}-week problem count"
        }) %>
      </td>
      <td class="exceptions-summary">
        <div class="exceptions-bugs-summary-group">
          <div class="exceptions-bugs-summary new-bugs <%= bugs_new_this_week.zero? ? "zero" : "positive" %>">
            <div class="bug-count"><span class="sign">+</span><%= bugs_new_this_week %> <%= image_tag(image_url("bug-new-32.png"), size: 32, :class => "bug") %></div>
          </div>
          <div class="exceptions-bugs-summary resolved-bugs <%= bugs_fixed_this_week.zero? ? "zero" : "negative" %>">
            <div class="bug-count"><span class="sign">â€“</span><%= bugs_fixed_this_week %> <%= image_tag(image_url("bug-fixed-32.png"), size: 32, :class => "bug") %></div>
          </div>
        </div>
        
        <% if bugs_change_this_week == 0 %>
          <p class="exceptions-bugs-summary total-bugs zero">
            <span class="bug-count">0</span><%= image_tag image_url("bug-zero-128.png"), size: 118 %>
          </p>
        <% elsif bugs_change_this_week < 0 %>
          <p class="exceptions-bugs-summary total-bugs negative" style="-webkit-box-shadow: inset 0 0 <%= -bugs_change_this_week * 2 %>px #42A800; <%= "letter-spacing: -0.15em; text-indent: -0.25em;" if (10..19).cover?(-bugs_change_this_week) %>">
            <span class="bug-count"><%= -bugs_change_this_week %></span><%= image_tag image_url("bug-fixed-128.png"), size: 118 %>
          </p>
        <% else %>
          <p class="exceptions-bugs-summary total-bugs positive" style="-webkit-box-shadow: inset 0 0 <%= bugs_change_this_week * 2 %>px #E00000; <%= "letter-spacing: -0.15em; text-indent: -0.25em;" if (10..19).cover?(bugs_change_this_week) %>">
            <span class="bug-count"><%= bugs_change_this_week %></span><%= image_tag image_url("bug-new-128.png"), size: 118 %>
          </p>
        <% end %>
        
        
      </td>
    </tr>
  </table>
  
  <table class="layout bugs">
    <tbody>
      <% bug_counts_by_project.each do |project, bug_counts| %>
        <tr>
          <th><span class="label <%= project.color %>"><%= project.name %></span></th>
          <td>
            <% bug_counts.fetch("new", 0).times do %>
              <%= image_tag(image_url("bug-new-32.png"), size: 32, :class => "bug new-bug") %>
            <% end %>
            <% bug_counts.fetch("open", 0).times do %>
              <%= image_tag(image_url("bug-open-32.png"), size: 32, :class => "bug open-bug") %>
            <% end %>
            <% bug_counts.fetch("fixed", 0).times do %>
              <%= image_tag(image_url("bug-fixed-32.png"), size: 32, :class => "bug fixed-bug") %>
            <% end %>
          </td>
          <td>
            <%= score_card :medium do |s| %>
              <% s.raw do %>
                <p>
                  <span class="notices-count score-count">
                    <%= bar_graph({
                      data: (notices_by_week_by_project[project] || {}).values,
                      colors: "555555",
                      count: weeks_of_errbit_history,
                      height: 27,
                      bar_width: 4,
                      spacing: 1,
                      retina: true,
                      axes: false
                    }) %>
                  </span>
                  <span class="score-label">Notices/week</span>
                </p>
              <% end %>
              
              <% s.score "New", bug_counts["new"], :class => "new-bugs",
                  prefix: "<span class=\"sign\">+</span>".html_safe %>
              <% s.score "Fixed", bug_counts["fixed"], :class => "resolved-bugs",
                  prefix: "<span class=\"sign\">&ndash;</span>".html_safe %>
              <% s.score "Open", bug_counts["open"] + bug_counts["new"], :class => "open-bugs" %>
            <% end %>
          </td>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>
